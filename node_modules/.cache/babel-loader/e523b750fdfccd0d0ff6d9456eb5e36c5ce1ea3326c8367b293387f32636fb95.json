{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Async thunk for fetching all jobs\nexport const fetchJobs = createAsyncThunk(\"jobs/fetchJobs\", async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.get(\"https://jsonplaceholder.typicode.com/posts\");\n    // Transform the data to match our job structure\n    return response.data.map(post => ({\n      id: post.id,\n      title: post.title,\n      company: `Company ${post.id}`,\n      location: \"Remote\",\n      type: \"Full Time\",\n      experience: \"2-5 years\",\n      salary: \"$50,000 - $80,000\",\n      description: post.body,\n      requirements: [\"Bachelor's degree in Computer Science or related field\", \"Strong problem-solving skills\", \"Excellent communication abilities\", \"Team player with leadership potential\"],\n      skills: [\"JavaScript\", \"React\", \"Node.js\", \"TypeScript\"]\n    }));\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\n\n// Async thunk for fetching a single job\nexport const fetchJobById = createAsyncThunk(\"jobs/fetchJobById\", async (id, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.get(`https://jsonplaceholder.typicode.com/posts/${id}`);\n    // Transform the data to match our job structure\n    return {\n      id: response.data.id,\n      title: response.data.title,\n      company: `Company ${response.data.id}`,\n      location: \"Remote\",\n      type: \"Full Time\",\n      experience: \"2-5 years\",\n      salary: \"$50,000 - $80,000\",\n      description: response.data.body,\n      requirements: [\"Bachelor's degree in Computer Science or related field\", \"Strong problem-solving skills\", \"Excellent communication abilities\", \"Team player with leadership potential\"],\n      skills: [\"JavaScript\", \"React\", \"Node.js\", \"TypeScript\"]\n    };\n  } catch (error) {\n    return rejectWithValue(error.message);\n  }\n});\nconst initialState = {\n  jobs: [],\n  selectedJob: null,\n  loading: false,\n  error: null\n};\nconst jobsSlice = createSlice({\n  name: \"jobs\",\n  initialState,\n  reducers: {\n    clearSelectedJob: state => {\n      state.selectedJob = null;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Fetch all jobs\n    .addCase(fetchJobs.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchJobs.fulfilled, (state, action) => {\n      state.loading = false;\n      state.jobs = action.payload;\n    }).addCase(fetchJobs.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n    // Fetch single job\n    .addCase(fetchJobById.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchJobById.fulfilled, (state, action) => {\n      state.loading = false;\n      state.selectedJob = action.payload;\n    }).addCase(fetchJobById.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  clearSelectedJob\n} = jobsSlice.actions;\nexport default jobsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchJobs","_","rejectWithValue","response","get","data","map","post","id","title","company","location","type","experience","salary","description","body","requirements","skills","error","message","fetchJobById","initialState","jobs","selectedJob","loading","jobsSlice","name","reducers","clearSelectedJob","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["/Users/arvind/Desktop/JobHunt/jobhunt/src/redux/slices/jobsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Async thunk for fetching all jobs\nexport const fetchJobs = createAsyncThunk(\n  \"jobs/fetchJobs\",\n  async (_, { rejectWithValue }) => { \n    try {\n      const response = await axios.get(\n        \"https://jsonplaceholder.typicode.com/posts\"\n      );\n      // Transform the data to match our job structure\n      return response.data.map((post) => ({\n        id: post.id,\n        title: post.title,\n        company: `Company ${post.id}`,\n        location: \"Remote\",\n        type: \"Full Time\",\n        experience: \"2-5 years\",\n        salary: \"$50,000 - $80,000\",\n        description: post.body,\n        requirements: [\n          \"Bachelor's degree in Computer Science or related field\",\n          \"Strong problem-solving skills\",\n          \"Excellent communication abilities\",\n          \"Team player with leadership potential\",\n        ],\n        skills: [\"JavaScript\", \"React\", \"Node.js\", \"TypeScript\"],\n      }));\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\n// Async thunk for fetching a single job\nexport const fetchJobById = createAsyncThunk(\n  \"jobs/fetchJobById\",\n  async (id, { rejectWithValue }) => {\n    try {\n      const response = await axios.get(\n        `https://jsonplaceholder.typicode.com/posts/${id}`\n      );\n      // Transform the data to match our job structure\n      return {\n        id: response.data.id,\n        title: response.data.title,\n        company: `Company ${response.data.id}`,\n        location: \"Remote\",\n        type: \"Full Time\",\n        experience: \"2-5 years\",\n        salary: \"$50,000 - $80,000\",\n        description: response.data.body,\n        requirements: [\n          \"Bachelor's degree in Computer Science or related field\",\n          \"Strong problem-solving skills\",\n          \"Excellent communication abilities\",\n          \"Team player with leadership potential\",\n        ],\n        skills: [\"JavaScript\", \"React\", \"Node.js\", \"TypeScript\"],\n      };\n    } catch (error) {\n      return rejectWithValue(error.message);\n    }\n  }\n);\n\nconst initialState = {\n  jobs: [],\n  selectedJob: null,\n  loading: false,\n  error: null,\n};\n\nconst jobsSlice = createSlice({\n  name: \"jobs\",\n  initialState,\n  reducers: {\n    clearSelectedJob: (state) => {\n      state.selectedJob = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      // Fetch all jobs\n      .addCase(fetchJobs.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchJobs.fulfilled, (state, action) => {\n        state.loading = false;\n        state.jobs = action.payload;\n      })\n      .addCase(fetchJobs.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      // Fetch single job\n      .addCase(fetchJobById.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchJobById.fulfilled, (state, action) => {\n        state.loading = false;\n        state.selectedJob = action.payload;\n      })\n      .addCase(fetchJobById.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      });\n  },\n});\n\nexport const { clearSelectedJob } = jobsSlice.actions;\nexport default jobsSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}