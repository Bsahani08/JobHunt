{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// Async thunks for API calls\nexport const fetchJobs = createAsyncThunk('jobs/fetchJobs', async () => {\n  const response = await axios.get('https://jsonplaceholder.typicode.com/posts');\n  return response.data;\n});\nexport const fetchJobDetails = createAsyncThunk('jobs/fetchJobDetails', async id => {\n  const response = await axios.get(`https://jsonplaceholder.typicode.com/posts/${id}`);\n  return response.data;\n});\nexport const submitApplication = createAsyncThunk('jobs/submitApplication', async applicationData => {\n  const response = await axios.post('https://jsonplaceholder.typicode.com/posts', applicationData);\n  return response.data;\n});\nconst initialState = {\n  jobs: [],\n  selectedJob: null,\n  loading: false,\n  error: null\n};\nconst jobsSlice = createSlice({\n  name: 'jobs',\n  initialState,\n  reducers: {\n    setSelectedJob: (state, action) => {\n      state.selectedJob = action.payload;\n    },\n    clearSelectedJob: state => {\n      state.selectedJob = null;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Fetch Jobs\n    .addCase(fetchJobs.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchJobs.fulfilled, (state, action) => {\n      state.loading = false;\n      state.jobs = action.payload;\n    }).addCase(fetchJobs.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    })\n    // Fetch Job Details\n    .addCase(fetchJobDetails.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchJobDetails.fulfilled, (state, action) => {\n      state.loading = false;\n      state.selectedJob = action.payload;\n    }).addCase(fetchJobDetails.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    })\n    // Submit Application\n    .addCase(submitApplication.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(submitApplication.fulfilled, (state, action) => {\n      state.loading = false;\n      // Handle successful application submission\n    }).addCase(submitApplication.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  setSelectedJob,\n  clearSelectedJob\n} = jobsSlice.actions;\nexport default jobsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchJobs","response","get","data","fetchJobDetails","id","submitApplication","applicationData","post","initialState","jobs","selectedJob","loading","error","jobsSlice","name","reducers","setSelectedJob","state","action","payload","clearSelectedJob","extraReducers","builder","addCase","pending","fulfilled","rejected","message","actions","reducer"],"sources":["/Users/arvind/Desktop/JobHunt/jobhunt/src/redux/jobsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// Async thunks for API calls\nexport const fetchJobs = createAsyncThunk(\n  'jobs/fetchJobs',\n  async () => {\n    const response = await axios.get('https://jsonplaceholder.typicode.com/posts');\n    return response.data;\n  }\n);\n\nexport const fetchJobDetails = createAsyncThunk(\n  'jobs/fetchJobDetails',\n  async (id) => {\n    const response = await axios.get(`https://jsonplaceholder.typicode.com/posts/${id}`);\n    return response.data;\n  }\n);\n\nexport const submitApplication = createAsyncThunk(\n  'jobs/submitApplication',\n  async (applicationData) => {\n    const response = await axios.post('https://jsonplaceholder.typicode.com/posts', applicationData);\n    return response.data;\n  }\n);\n\nconst initialState = {\n  jobs: [],\n  selectedJob: null,\n  loading: false,\n  error: null,\n};\n\nconst jobsSlice = createSlice({\n  name: 'jobs',\n  initialState,\n  reducers: {\n    setSelectedJob: (state, action) => {\n      state.selectedJob = action.payload;\n    },\n    clearSelectedJob: (state) => {\n      state.selectedJob = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      // Fetch Jobs\n      .addCase(fetchJobs.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchJobs.fulfilled, (state, action) => {\n        state.loading = false;\n        state.jobs = action.payload;\n      })\n      .addCase(fetchJobs.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message;\n      })\n      // Fetch Job Details\n      .addCase(fetchJobDetails.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchJobDetails.fulfilled, (state, action) => {\n        state.loading = false;\n        state.selectedJob = action.payload;\n      })\n      .addCase(fetchJobDetails.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message;\n      })\n      // Submit Application\n      .addCase(submitApplication.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(submitApplication.fulfilled, (state, action) => {\n        state.loading = false;\n        // Handle successful application submission\n      })\n      .addCase(submitApplication.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport const { setSelectedJob, clearSelectedJob } = jobsSlice.actions;\nexport default jobsSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}